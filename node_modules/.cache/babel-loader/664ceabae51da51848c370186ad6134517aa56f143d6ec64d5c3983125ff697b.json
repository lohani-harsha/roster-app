{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n// import axios from \"axios\";\n\nconst companyInfoSlice = createSlice({\n  name: \"companyInfoStateSliceReducer\",\n  initialState: {\n    loading: false,\n    selectedEmp: null,\n    showEmpDetails: false\n  },\n  reducers: {\n    // ... other reducers ...\n    fetchCompanyInfoRequest: state => {\n      // state.loading = true;\n      // state.error = null;\n    },\n    fetchCompanyInfoSuccess: (state, action) => {\n      // state.user = action.payload;\n      // state.loading = false;\n      state.loading = false;\n      state.companyInfo = action.payload.companyInfo;\n      state.employees = action.payload.employees;\n      state.errorMessage = null;\n    },\n    fetchCompanyInfoFailure: (state, action) => {\n      // state.error = action.payload;\n      // state.loading = false;\n    },\n    toggleLoadingStateAction: (state, action) => {\n      console.log(\"toggling loading state\");\n      state.loading = !state.loading;\n    },\n    setSelectedEmployeeStateAction: (state, action) => {\n      state.selectedEmp = action.payload;\n    },\n    setShowEmpDetailsstateAction: (state, action) => {\n      state.showEmpDetails = action.payload;\n      if (!action.payload) {\n        state.selectedEmp = null;\n      }\n    }\n  }\n  //   extraReducers: (builder) => {\n  //     builder\n  //       .addCase(fetchCompanyInfoAction.pending, (state) => {\n  //         state.loading = true;\n  //         state.errorMessage = null;\n  //       })\n  //       .addCase(fetchCompanyInfoAction.fulfilled, (state, action) => {\n  //         console.log(\"fulfilled\", action);\n  // state.loading = false;\n  // state.companyInfo = action.payload.companyInfo;\n  // state.employees = action.payload.employees;\n  // state.errorMessage = null\n  //       })\n  //       .addCase(fetchCompanyInfoAction.rejected, (state, action) => {\n  //         state.loading = false;\n  //         state.errorMessage = action.error.message;\n  //       });\n  //   },\n});\n\n// export const fetchCompanyInfoAction = createAsyncThunk(\n//   \"companyInfoStateSliceReducer/fetchCompanyInfoAction\",\n//   async () => {\n//     console.log(\"fetchCompanyInfoAction received\");\n//     try {\n//       const response = await axios.get(\"http://localhost:3001/companies\");\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(\"Error fetching data\");\n//     }\n//   }\n// );\n\nexport const {\n  fetchCompanyInfoRequest,\n  fetchCompanyInfoSuccess,\n  fetchCompanyInfoFailure,\n  toggleLoadingStateAction,\n  setSelectedEmployeeStateAction,\n  setShowEmpDetailsstateAction\n} = companyInfoSlice.actions;\nexport const companyInfoReducer = companyInfoSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","companyInfoSlice","name","initialState","loading","selectedEmp","showEmpDetails","reducers","fetchCompanyInfoRequest","state","fetchCompanyInfoSuccess","action","companyInfo","payload","employees","errorMessage","fetchCompanyInfoFailure","toggleLoadingStateAction","console","log","setSelectedEmployeeStateAction","setShowEmpDetailsstateAction","actions","companyInfoReducer","reducer"],"sources":["/Users/mayanklohani/Documents/roster-app/src/redux/companyInfoSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n// import axios from \"axios\";\n\nconst companyInfoSlice = createSlice({\n  name: \"companyInfoStateSliceReducer\",\n  initialState: {\n    loading: false,\n    selectedEmp: null,\n    showEmpDetails: false,\n  },\n  reducers: {\n    // ... other reducers ...\n    fetchCompanyInfoRequest: (state) => {\n        // state.loading = true;\n        // state.error = null;\n      },\n      fetchCompanyInfoSuccess: (state, action) => {\n        // state.user = action.payload;\n        // state.loading = false;\n        state.loading = false;\n        state.companyInfo = action.payload.companyInfo;\n        state.employees = action.payload.employees;\n        state.errorMessage = null\n      },\n      fetchCompanyInfoFailure: (state, action) => {\n        // state.error = action.payload;\n        // state.loading = false;\n      },\n    toggleLoadingStateAction: (state, action) => {\n      console.log(\"toggling loading state\");\n      state.loading = !state.loading;\n    },\n    setSelectedEmployeeStateAction: (state, action) => {\n      state.selectedEmp = action.payload;\n    },\n    setShowEmpDetailsstateAction: (state, action) => {\n      state.showEmpDetails = action.payload;\n      if (!action.payload) {\n        state.selectedEmp = null;\n      }\n    },\n  },\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(fetchCompanyInfoAction.pending, (state) => {\n//         state.loading = true;\n//         state.errorMessage = null;\n//       })\n//       .addCase(fetchCompanyInfoAction.fulfilled, (state, action) => {\n//         console.log(\"fulfilled\", action);\n        // state.loading = false;\n        // state.companyInfo = action.payload.companyInfo;\n        // state.employees = action.payload.employees;\n        // state.errorMessage = null\n//       })\n//       .addCase(fetchCompanyInfoAction.rejected, (state, action) => {\n//         state.loading = false;\n//         state.errorMessage = action.error.message;\n//       });\n//   },\n});\n\n// export const fetchCompanyInfoAction = createAsyncThunk(\n//   \"companyInfoStateSliceReducer/fetchCompanyInfoAction\",\n//   async () => {\n//     console.log(\"fetchCompanyInfoAction received\");\n//     try {\n//       const response = await axios.get(\"http://localhost:3001/companies\");\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(\"Error fetching data\");\n//     }\n//   }\n// );\n\nexport const {\n    fetchCompanyInfoRequest,\n    fetchCompanyInfoSuccess,\n    fetchCompanyInfoFailure,\n  toggleLoadingStateAction,\n  setSelectedEmployeeStateAction,\n  setShowEmpDetailsstateAction,\n} = companyInfoSlice.actions;\nexport const companyInfoReducer = companyInfoSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE;;AAEA,MAAMC,gBAAgB,GAAGF,WAAW,CAAC;EACnCG,IAAI,EAAE,8BAA8B;EACpCC,YAAY,EAAE;IACZC,OAAO,EAAE,KAAK;IACdC,WAAW,EAAE,IAAI;IACjBC,cAAc,EAAE;EAClB,CAAC;EACDC,QAAQ,EAAE;IACR;IACAC,uBAAuB,EAAGC,KAAK,IAAK;MAChC;MACA;IAAA,CACD;IACDC,uBAAuB,EAAEA,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC1C;MACA;MACAF,KAAK,CAACL,OAAO,GAAG,KAAK;MACrBK,KAAK,CAACG,WAAW,GAAGD,MAAM,CAACE,OAAO,CAACD,WAAW;MAC9CH,KAAK,CAACK,SAAS,GAAGH,MAAM,CAACE,OAAO,CAACC,SAAS;MAC1CL,KAAK,CAACM,YAAY,GAAG,IAAI;IAC3B,CAAC;IACDC,uBAAuB,EAAEA,CAACP,KAAK,EAAEE,MAAM,KAAK;MAC1C;MACA;IAAA,CACD;IACHM,wBAAwB,EAAEA,CAACR,KAAK,EAAEE,MAAM,KAAK;MAC3CO,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrCV,KAAK,CAACL,OAAO,GAAG,CAACK,KAAK,CAACL,OAAO;IAChC,CAAC;IACDgB,8BAA8B,EAAEA,CAACX,KAAK,EAAEE,MAAM,KAAK;MACjDF,KAAK,CAACJ,WAAW,GAAGM,MAAM,CAACE,OAAO;IACpC,CAAC;IACDQ,4BAA4B,EAAEA,CAACZ,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACH,cAAc,GAAGK,MAAM,CAACE,OAAO;MACrC,IAAI,CAACF,MAAM,CAACE,OAAO,EAAE;QACnBJ,KAAK,CAACJ,WAAW,GAAG,IAAI;MAC1B;IACF;EACF;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACQ;EACA;EACA;EACA;EACR;EACA;EACA;EACA;EACA;EACA;AACA,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAM;EACTG,uBAAuB;EACvBE,uBAAuB;EACvBM,uBAAuB;EACzBC,wBAAwB;EACxBG,8BAA8B;EAC9BC;AACF,CAAC,GAAGpB,gBAAgB,CAACqB,OAAO;AAC5B,OAAO,MAAMC,kBAAkB,GAAGtB,gBAAgB,CAACuB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}