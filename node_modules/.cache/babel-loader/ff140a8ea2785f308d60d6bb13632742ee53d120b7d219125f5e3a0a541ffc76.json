{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst fetchCompanyInfoSlice = createSlice({\n  name: \"companyInfoState\",\n  initialState: {\n    loading: false,\n    selectedEmp: null,\n    showEmpDetails: false\n  },\n  reducers: {\n    // ... other reducers ...\n    toggleLoadingStateAction: (state, action) => {\n      console.log(\"toggling loading state\");\n      state.loading = !state.loading;\n    },\n    setSelectedEmployeeStateAction: (state, action) => {\n      state.selectedEmp = action.payload;\n    },\n    setShowEmpDetailsstateAction: (state, action) => {\n      state.showEmpDetails = action.payload;\n      if (!action.payload) {\n        state.selectedEmp = null;\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchCompanyInfoAction.pending, state => {\n      state.loading = true;\n      state.errorMessage = null;\n    }).addCase(fetchCompanyInfoAction.fulfilled, (state, action) => {\n      console.log(\"fulfilled\", action);\n      state.loading = false;\n      state.companyInfo = action.payload.companyInfo;\n      state.employees = action.payload.employees;\n      state.errorMessage = null;\n    }).addCase(fetchCompanyInfoAction.rejected, (state, action) => {\n      state.loading = false;\n      state.errorMessage = action.error.message;\n    });\n  }\n});\nexport const fetchCompanyInfoAction = createAsyncThunk(\"companyInfoState/fetchCompanyInfoAction\", async () => {\n  console.log(\"fetchCompanyInfoAction received\");\n  try {\n    const response = await axios.get(\"http://localhost:3001/companies\");\n    return response.data;\n  } catch (error) {\n    throw new Error(\"Error fetching data\");\n  }\n});\nexport const {\n  toggleLoadingStateAction,\n  setSelectedEmployeeStateAction,\n  setShowEmpDetailsstateAction\n} = fetchCompanyInfoSlice.actions;\nexport const companyInfoReducer = fetchCompanyInfoSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","fetchCompanyInfoSlice","name","initialState","loading","selectedEmp","showEmpDetails","reducers","toggleLoadingStateAction","state","action","console","log","setSelectedEmployeeStateAction","payload","setShowEmpDetailsstateAction","extraReducers","builder","addCase","fetchCompanyInfoAction","pending","errorMessage","fulfilled","companyInfo","employees","rejected","error","message","response","get","data","Error","actions","companyInfoReducer","reducer"],"sources":["/Users/mayanklohani/Documents/roster-app/src/store/reducers.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst fetchCompanyInfoSlice = createSlice({\n  name: \"companyInfoState\",\n  initialState: {\n    loading: false,\n    selectedEmp: null,\n    showEmpDetails: false,\n  },\n  reducers: {\n    // ... other reducers ...\n    toggleLoadingStateAction: (state, action) => {\n      console.log(\"toggling loading state\");\n      state.loading = !state.loading;\n    },\n    setSelectedEmployeeStateAction: (state, action) => {\n      state.selectedEmp = action.payload;\n    },\n    setShowEmpDetailsstateAction: (state, action) => {\n      state.showEmpDetails = action.payload;\n      if (!action.payload) {\n        state.selectedEmp = null;\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchCompanyInfoAction.pending, (state) => {\n        state.loading = true;\n        state.errorMessage = null;\n      })\n      .addCase(fetchCompanyInfoAction.fulfilled, (state, action) => {\n        console.log(\"fulfilled\", action);\n        state.loading = false;\n        state.companyInfo = action.payload.companyInfo;\n        state.employees = action.payload.employees;\n        state.errorMessage = null\n      })\n      .addCase(fetchCompanyInfoAction.rejected, (state, action) => {\n        state.loading = false;\n        state.errorMessage = action.error.message;\n      });\n  },\n});\n\nexport const fetchCompanyInfoAction = createAsyncThunk(\n  \"companyInfoState/fetchCompanyInfoAction\",\n  async () => {\n    console.log(\"fetchCompanyInfoAction received\");\n    try {\n      const response = await axios.get(\"http://localhost:3001/companies\");\n      return response.data;\n    } catch (error) {\n      throw new Error(\"Error fetching data\");\n    }\n  }\n);\n\nexport const {\n  toggleLoadingStateAction,\n  setSelectedEmployeeStateAction,\n  setShowEmpDetailsstateAction,\n} = fetchCompanyInfoSlice.actions;\nexport const companyInfoReducer = fetchCompanyInfoSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,qBAAqB,GAAGH,WAAW,CAAC;EACxCI,IAAI,EAAE,kBAAkB;EACxBC,YAAY,EAAE;IACZC,OAAO,EAAE,KAAK;IACdC,WAAW,EAAE,IAAI;IACjBC,cAAc,EAAE;EAClB,CAAC;EACDC,QAAQ,EAAE;IACR;IACAC,wBAAwB,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3CC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrCH,KAAK,CAACL,OAAO,GAAG,CAACK,KAAK,CAACL,OAAO;IAChC,CAAC;IACDS,8BAA8B,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACjDD,KAAK,CAACJ,WAAW,GAAGK,MAAM,CAACI,OAAO;IACpC,CAAC;IACDC,4BAA4B,EAAEA,CAACN,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAACH,cAAc,GAAGI,MAAM,CAACI,OAAO;MACrC,IAAI,CAACJ,MAAM,CAACI,OAAO,EAAE;QACnBL,KAAK,CAACJ,WAAW,GAAG,IAAI;MAC1B;IACF;EACF,CAAC;EACDW,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACC,sBAAsB,CAACC,OAAO,EAAGX,KAAK,IAAK;MAClDA,KAAK,CAACL,OAAO,GAAG,IAAI;MACpBK,KAAK,CAACY,YAAY,GAAG,IAAI;IAC3B,CAAC,CAAC,CACDH,OAAO,CAACC,sBAAsB,CAACG,SAAS,EAAE,CAACb,KAAK,EAAEC,MAAM,KAAK;MAC5DC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEF,MAAM,CAAC;MAChCD,KAAK,CAACL,OAAO,GAAG,KAAK;MACrBK,KAAK,CAACc,WAAW,GAAGb,MAAM,CAACI,OAAO,CAACS,WAAW;MAC9Cd,KAAK,CAACe,SAAS,GAAGd,MAAM,CAACI,OAAO,CAACU,SAAS;MAC1Cf,KAAK,CAACY,YAAY,GAAG,IAAI;IAC3B,CAAC,CAAC,CACDH,OAAO,CAACC,sBAAsB,CAACM,QAAQ,EAAE,CAAChB,KAAK,EAAEC,MAAM,KAAK;MAC3DD,KAAK,CAACL,OAAO,GAAG,KAAK;MACrBK,KAAK,CAACY,YAAY,GAAGX,MAAM,CAACgB,KAAK,CAACC,OAAO;IAC3C,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAMR,sBAAsB,GAAGpB,gBAAgB,CACpD,yCAAyC,EACzC,YAAY;EACVY,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;EAC9C,IAAI;IACF,MAAMgB,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,GAAG,CAAC,iCAAiC,CAAC;IACnE,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACd,MAAM,IAAIK,KAAK,CAAC,qBAAqB,CAAC;EACxC;AACF,CACF,CAAC;AAED,OAAO,MAAM;EACXvB,wBAAwB;EACxBK,8BAA8B;EAC9BE;AACF,CAAC,GAAGd,qBAAqB,CAAC+B,OAAO;AACjC,OAAO,MAAMC,kBAAkB,GAAGhC,qBAAqB,CAACiC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}