{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport { companyInfoReducer } from \"./../redux/companyInfoSlice\";\nimport rootSaga from './sagas';\n\n// Create saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// Create store with redux-saga middleware\n// const store = configureStore({\n//   reducer: {\n//     companyInfoState: companyInfoSlice.reducer\n//   },\n//   middleware: (getDefaultMiddleware) =>\n//     getDefaultMiddleware({\n//       thunk: false,  // Disable thunk since we're using saga\n//       serializableCheck: false, // Disable serializable checks for saga actions\n//     }).concat(sagaMiddleware),\n// });\n// Run the root saga\n\nexport const setupStore = preloadedState => {\n  return configureStore({\n    preloadedState,\n    reducer: {\n      companyInfoState: companyInfoReducer\n    },\n    middleware: getDefaultMiddleware => getDefaultMiddleware({\n      thunk: false,\n      // Disable thunk since we're using saga\n      serializableCheck: false // Disable serializable checks for saga actions\n    }).concat(sagaMiddleware)\n  });\n};\nexport const store = setupStore({});\nsagaMiddleware.run(rootSaga);\nexport default store;","map":{"version":3,"names":["configureStore","createSagaMiddleware","companyInfoReducer","rootSaga","sagaMiddleware","setupStore","preloadedState","reducer","companyInfoState","middleware","getDefaultMiddleware","thunk","serializableCheck","concat","store","run"],"sources":["/Users/mayanklohani/Documents/roster-app/src/redux/store.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport {companyInfoReducer} from \"./../redux/companyInfoSlice\";\nimport rootSaga from './sagas';\n\n// Create saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// Create store with redux-saga middleware\n// const store = configureStore({\n//   reducer: {\n//     companyInfoState: companyInfoSlice.reducer\n//   },\n//   middleware: (getDefaultMiddleware) =>\n//     getDefaultMiddleware({\n//       thunk: false,  // Disable thunk since we're using saga\n//       serializableCheck: false, // Disable serializable checks for saga actions\n//     }).concat(sagaMiddleware),\n// });\n// Run the root saga\n\n\n\n\n\nexport const setupStore = preloadedState => {\n  return configureStore({\n    preloadedState,\n    reducer: {\n      companyInfoState: companyInfoReducer\n    },\n    middleware: (getDefaultMiddleware) =>\n      getDefaultMiddleware({\n        thunk: false,  // Disable thunk since we're using saga\n        serializableCheck: false, // Disable serializable checks for saga actions\n      }).concat(sagaMiddleware),\n  })\n}\n\n\nexport const store = setupStore ({})\nsagaMiddleware.run(rootSaga);\nexport default store;\n\n\n\n\n\n\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,oBAAoB,MAAM,YAAY;AAC7C,SAAQC,kBAAkB,QAAO,6BAA6B;AAC9D,OAAOC,QAAQ,MAAM,SAAS;;AAE9B;AACA,MAAMC,cAAc,GAAGH,oBAAoB,CAAC,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA,OAAO,MAAMI,UAAU,GAAGC,cAAc,IAAI;EAC1C,OAAON,cAAc,CAAC;IACpBM,cAAc;IACdC,OAAO,EAAE;MACPC,gBAAgB,EAAEN;IACpB,CAAC;IACDO,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;MACnBC,KAAK,EAAE,KAAK;MAAG;MACfC,iBAAiB,EAAE,KAAK,CAAE;IAC5B,CAAC,CAAC,CAACC,MAAM,CAACT,cAAc;EAC5B,CAAC,CAAC;AACJ,CAAC;AAGD,OAAO,MAAMU,KAAK,GAAGT,UAAU,CAAE,CAAC,CAAC,CAAC;AACpCD,cAAc,CAACW,GAAG,CAACZ,QAAQ,CAAC;AAC5B,eAAeW,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}