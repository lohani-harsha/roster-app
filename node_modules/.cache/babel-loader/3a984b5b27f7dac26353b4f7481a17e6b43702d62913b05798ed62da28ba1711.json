{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport { fetchCompanyInfoRequest, fetchCompanyInfoSuccess, fetchCompanyInfoFailure } from './companyInfoSlice';\n\n// Simulate an API call\nconst fetchCompanyInfoFromAPI = async () => {\n  const response = await fetch('http://localhost:3001/companies');\n  if (!response.ok) throw new Error('Failed to fetch user');\n  return response.json();\n};\n\n// Worker saga: makes the API call when the fetchUserRequest action is dispatched\nfunction* fetchCompanyInfoSaga() {\n  try {\n    const companyInfo = yield call(fetchCompanyInfoFromAPI); // Call the API\n    yield put(fetchCompanyInfoSuccess(companyInfo)); // Dispatch success action\n  } catch (error) {\n    yield put(fetchCompanyInfoFailure(error.message)); // Dispatch failure action\n  }\n}\n\n// Watcher saga: watches for actions dispatched to the store and starts a new fetchUserSaga\nfunction* watchFetchCompanyInfoRequest() {\n  yield takeEvery(fetchCompanyInfoRequest.type, fetchCompanyInfoSaga);\n}\nexport default watchFetchCompanyInfoRequest;","map":{"version":3,"names":["takeEvery","call","put","fetchCompanyInfoRequest","fetchCompanyInfoSuccess","fetchCompanyInfoFailure","fetchCompanyInfoFromAPI","response","fetch","ok","Error","json","fetchCompanyInfoSaga","companyInfo","error","message","watchFetchCompanyInfoRequest","type"],"sources":["/Users/mayanklohani/Documents/roster-app/src/redux/sagas.js"],"sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects';\nimport { fetchCompanyInfoRequest,fetchCompanyInfoSuccess,fetchCompanyInfoFailure} from './companyInfoSlice';\n\n// Simulate an API call\nconst fetchCompanyInfoFromAPI = async () => {\n  const response = await fetch('http://localhost:3001/companies');\n  if (!response.ok) throw new Error('Failed to fetch user');\n  return response.json();\n};\n\n// Worker saga: makes the API call when the fetchUserRequest action is dispatched\nfunction* fetchCompanyInfoSaga() {\n  try {\n    const companyInfo  = yield call(fetchCompanyInfoFromAPI); // Call the API\n    yield put(fetchCompanyInfoSuccess(companyInfo )); // Dispatch success action\n  } catch (error) {\n    yield put(fetchCompanyInfoFailure(error.message)); // Dispatch failure action\n  }\n}\n\n// Watcher saga: watches for actions dispatched to the store and starts a new fetchUserSaga\nfunction* watchFetchCompanyInfoRequest() {\n  yield takeEvery( fetchCompanyInfoRequest.type, fetchCompanyInfoSaga);\n}\n\nexport default watchFetchCompanyInfoRequest;"],"mappings":"AAAA,SAASA,SAAS,EAAEC,IAAI,EAAEC,GAAG,QAAQ,oBAAoB;AACzD,SAASC,uBAAuB,EAACC,uBAAuB,EAACC,uBAAuB,QAAO,oBAAoB;;AAE3G;AACA,MAAMC,uBAAuB,GAAG,MAAAA,CAAA,KAAY;EAC1C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;EAC/D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;EACzD,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,UAAUC,oBAAoBA,CAAA,EAAG;EAC/B,IAAI;IACF,MAAMC,WAAW,GAAI,MAAMZ,IAAI,CAACK,uBAAuB,CAAC,CAAC,CAAC;IAC1D,MAAMJ,GAAG,CAACE,uBAAuB,CAACS,WAAY,CAAC,CAAC,CAAC,CAAC;EACpD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMZ,GAAG,CAACG,uBAAuB,CAACS,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;EACrD;AACF;;AAEA;AACA,UAAUC,4BAA4BA,CAAA,EAAG;EACvC,MAAMhB,SAAS,CAAEG,uBAAuB,CAACc,IAAI,EAAEL,oBAAoB,CAAC;AACtE;AAEA,eAAeI,4BAA4B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}