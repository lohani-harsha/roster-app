{"ast":null,"code":"// import { configureStore } from \"@reduxjs/toolkit\";\n// import { companyInfoReducer } from \"./reducers\";\n\n// const store = configureStore({\n//   companyInfoReducer, \n//   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(sagaMiddleware),\n// })\n\n// export default store;\n\nimport { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport { companyInfoReducer } from \"./../redux/companyInfoSlice\";\nimport rootSaga from './sagas';\n\n// Create saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// Create store with redux-saga middleware\nconst store = configureStore({\n  reducer: {\n    companyInfoState: companyInfoReducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    thunk: false,\n    // Disable thunk since we're using saga\n    serializableCheck: false // Disable serializable checks for saga actions\n  }).concat(sagaMiddleware)\n});\n\n// Run the root saga\nsagaMiddleware.run(rootSaga);\nexport default store;","map":{"version":3,"names":["configureStore","createSagaMiddleware","companyInfoReducer","rootSaga","sagaMiddleware","store","reducer","companyInfoState","middleware","getDefaultMiddleware","thunk","serializableCheck","concat","run"],"sources":["/Users/mayanklohani/Documents/roster-app/src/redux/store.js"],"sourcesContent":["// import { configureStore } from \"@reduxjs/toolkit\";\n// import { companyInfoReducer } from \"./reducers\";\n\n// const store = configureStore({\n//   companyInfoReducer, \n//   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(sagaMiddleware),\n// })\n\n// export default store;\n\nimport { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport { companyInfoReducer } from \"./../redux/companyInfoSlice\";\nimport rootSaga from './sagas';\n\n// Create saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// Create store with redux-saga middleware\nconst store = configureStore({\n  reducer: {\n    companyInfoState: companyInfoReducer\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      thunk: false,  // Disable thunk since we're using saga\n      serializableCheck: false, // Disable serializable checks for saga actions\n    }).concat(sagaMiddleware),\n});\n\n// Run the root saga\nsagaMiddleware.run(rootSaga);\n\nexport default store;"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,oBAAoB,MAAM,YAAY;AAC7C,SAASC,kBAAkB,QAAQ,6BAA6B;AAChE,OAAOC,QAAQ,MAAM,SAAS;;AAE9B;AACA,MAAMC,cAAc,GAAGH,oBAAoB,CAAC,CAAC;;AAE7C;AACA,MAAMI,KAAK,GAAGL,cAAc,CAAC;EAC3BM,OAAO,EAAE;IACPC,gBAAgB,EAAEL;EACpB,CAAC;EACDM,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,KAAK,EAAE,KAAK;IAAG;IACfC,iBAAiB,EAAE,KAAK,CAAE;EAC5B,CAAC,CAAC,CAACC,MAAM,CAACR,cAAc;AAC5B,CAAC,CAAC;;AAEF;AACAA,cAAc,CAACS,GAAG,CAACV,QAAQ,CAAC;AAE5B,eAAeE,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}