{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n// import axios from \"axios\";\n\nconst companyInfoSlice = createSlice({\n  name: \"companyInfoStateSliceReducer\",\n  initialState: {\n    loading: false,\n    selectedEmp: null,\n    showEmpDetails: false\n  },\n  reducers: {\n    // ... other reducers ...\n    fetchCompanyInfoRequest: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchCompanyInfoSuccess: (state, action) => {\n      // state.user = action.payload;\n      // state.loading = false;\n      console.log(\"success\", action.payload);\n      console.log(\"state\", state);\n      state.loading = false;\n      state.companyInfo = action.payload.companyInfo;\n      state.employees = action.payload.employees;\n      state.errorMessage = null;\n    },\n    fetchCompanyInfoFailure: (state, action) => {\n      console.log(\"failure\", action.payload);\n      state.error = action.payload;\n      state.loading = false;\n    },\n    toggleLoadingStateAction: (state, action) => {\n      console.log(\"toggling loading state\");\n      state.loading = !state.loading;\n    },\n    setSelectedEmployeeStateAction: (state, action) => {\n      console.log(\"selected Employee\", action.payload);\n      state.selectedEmp = action.payload;\n    },\n    setShowEmpDetailsstateAction: (state, action) => {\n      state.showEmpDetails = action.payload;\n      if (!action.payload) {\n        state.selectedEmp = null;\n      }\n    }\n  }\n});\nexport const {\n  fetchCompanyInfoRequest,\n  fetchCompanyInfoSuccess,\n  fetchCompanyInfoFailure,\n  toggleLoadingStateAction,\n  setSelectedEmployeeStateAction,\n  setShowEmpDetailsstateAction\n} = companyInfoSlice.actions;\nexport const companyInfoReducer = companyInfoSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","companyInfoSlice","name","initialState","loading","selectedEmp","showEmpDetails","reducers","fetchCompanyInfoRequest","state","error","fetchCompanyInfoSuccess","action","console","log","payload","companyInfo","employees","errorMessage","fetchCompanyInfoFailure","toggleLoadingStateAction","setSelectedEmployeeStateAction","setShowEmpDetailsstateAction","actions","companyInfoReducer","reducer"],"sources":["/Users/mayanklohani/Documents/roster-app/src/redux/companyInfoSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n// import axios from \"axios\";\n\nconst companyInfoSlice = createSlice({\n  name: \"companyInfoStateSliceReducer\",\n  initialState: {\n    loading: false,\n    selectedEmp: null,\n    showEmpDetails: false,\n  },\n  reducers: {\n    // ... other reducers ...\n        fetchCompanyInfoRequest: (state) => {\n        state.loading = true;\n        state.error = null;\n      },\n      fetchCompanyInfoSuccess: (state, action) => {\n        // state.user = action.payload;\n        // state.loading = false;\n        console.log(\"success\",action.payload)\n        console.log(\"state\",state)\n        state.loading = false;\n        state.companyInfo = action.payload.companyInfo;\n        state.employees = action.payload.employees;\n        state.errorMessage = null\n      },\n      fetchCompanyInfoFailure: (state, action) => {\n        console.log(\"failure\",action.payload )\n        state.error = action.payload;\n        state.loading = false;\n      },\n    toggleLoadingStateAction: (state, action) => {\n      console.log(\"toggling loading state\");\n      state.loading = !state.loading;\n    },\n    setSelectedEmployeeStateAction: (state, action) => {\n        console.log(\"selected Employee\",action.payload)\n      state.selectedEmp = action.payload;\n    },\n    setShowEmpDetailsstateAction: (state, action) => {\n      state.showEmpDetails = action.payload;\n      if (!action.payload) {\n        state.selectedEmp = null;\n      }\n    },\n  },\n});\n\n\n\nexport const {\n    fetchCompanyInfoRequest,\n    fetchCompanyInfoSuccess,\n    fetchCompanyInfoFailure,\n  toggleLoadingStateAction,\n  setSelectedEmployeeStateAction,\n  setShowEmpDetailsstateAction,\n} = companyInfoSlice.actions;\nexport const companyInfoReducer = companyInfoSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE;;AAEA,MAAMC,gBAAgB,GAAGF,WAAW,CAAC;EACnCG,IAAI,EAAE,8BAA8B;EACpCC,YAAY,EAAE;IACZC,OAAO,EAAE,KAAK;IACdC,WAAW,EAAE,IAAI;IACjBC,cAAc,EAAE;EAClB,CAAC;EACDC,QAAQ,EAAE;IACR;IACIC,uBAAuB,EAAGC,KAAK,IAAK;MACpCA,KAAK,CAACL,OAAO,GAAG,IAAI;MACpBK,KAAK,CAACC,KAAK,GAAG,IAAI;IACpB,CAAC;IACDC,uBAAuB,EAAEA,CAACF,KAAK,EAAEG,MAAM,KAAK;MAC1C;MACA;MACAC,OAAO,CAACC,GAAG,CAAC,SAAS,EAACF,MAAM,CAACG,OAAO,CAAC;MACrCF,OAAO,CAACC,GAAG,CAAC,OAAO,EAACL,KAAK,CAAC;MAC1BA,KAAK,CAACL,OAAO,GAAG,KAAK;MACrBK,KAAK,CAACO,WAAW,GAAGJ,MAAM,CAACG,OAAO,CAACC,WAAW;MAC9CP,KAAK,CAACQ,SAAS,GAAGL,MAAM,CAACG,OAAO,CAACE,SAAS;MAC1CR,KAAK,CAACS,YAAY,GAAG,IAAI;IAC3B,CAAC;IACDC,uBAAuB,EAAEA,CAACV,KAAK,EAAEG,MAAM,KAAK;MAC1CC,OAAO,CAACC,GAAG,CAAC,SAAS,EAACF,MAAM,CAACG,OAAQ,CAAC;MACtCN,KAAK,CAACC,KAAK,GAAGE,MAAM,CAACG,OAAO;MAC5BN,KAAK,CAACL,OAAO,GAAG,KAAK;IACvB,CAAC;IACHgB,wBAAwB,EAAEA,CAACX,KAAK,EAAEG,MAAM,KAAK;MAC3CC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrCL,KAAK,CAACL,OAAO,GAAG,CAACK,KAAK,CAACL,OAAO;IAChC,CAAC;IACDiB,8BAA8B,EAAEA,CAACZ,KAAK,EAAEG,MAAM,KAAK;MAC/CC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAACF,MAAM,CAACG,OAAO,CAAC;MACjDN,KAAK,CAACJ,WAAW,GAAGO,MAAM,CAACG,OAAO;IACpC,CAAC;IACDO,4BAA4B,EAAEA,CAACb,KAAK,EAAEG,MAAM,KAAK;MAC/CH,KAAK,CAACH,cAAc,GAAGM,MAAM,CAACG,OAAO;MACrC,IAAI,CAACH,MAAM,CAACG,OAAO,EAAE;QACnBN,KAAK,CAACJ,WAAW,GAAG,IAAI;MAC1B;IACF;EACF;AACF,CAAC,CAAC;AAIF,OAAO,MAAM;EACTG,uBAAuB;EACvBG,uBAAuB;EACvBQ,uBAAuB;EACzBC,wBAAwB;EACxBC,8BAA8B;EAC9BC;AACF,CAAC,GAAGrB,gBAAgB,CAACsB,OAAO;AAC5B,OAAO,MAAMC,kBAAkB,GAAGvB,gBAAgB,CAACwB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}