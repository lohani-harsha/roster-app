{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport { companyInfoSlice } from \"./../redux/companyInfoSlice\";\nimport rootSaga from './sagas';\n\n// Create saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// Create store with redux-saga middleware\nconst store = configureStore({\n  reducer: {\n    companyInfoState: companyInfoSlice.reducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    thunk: false,\n    // Disable thunk since we're using saga\n    serializableCheck: false // Disable serializable checks for saga actions\n  }).concat(sagaMiddleware)\n});\n\n// for test cases\nexport const setupStore = preloadedState => {\n  return configureStore({\n    preloadedState,\n    reducer: {\n      companyInfoState: companyInfoSlice.reducer\n    },\n    middleware: getDefaultMiddleware => getDefaultMiddleware({\n      thunk: false,\n      // Disable thunk since we're using saga\n      serializableCheck: false // Disable serializable checks for saga actions\n    }).concat(sagaMiddleware)\n  });\n};\n\n// Run the root saga\nsagaMiddleware.run(rootSaga);\nexport default store;","map":{"version":3,"names":["configureStore","createSagaMiddleware","companyInfoSlice","rootSaga","sagaMiddleware","store","reducer","companyInfoState","middleware","getDefaultMiddleware","thunk","serializableCheck","concat","setupStore","preloadedState","run"],"sources":["/Users/mayanklohani/Documents/roster-app/src/redux/store.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport {companyInfoSlice} from \"./../redux/companyInfoSlice\";\nimport rootSaga from './sagas';\n\n// Create saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// Create store with redux-saga middleware\nconst store = configureStore({\n  reducer: {\n    companyInfoState: companyInfoSlice.reducer\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      thunk: false,  // Disable thunk since we're using saga\n      serializableCheck: false, // Disable serializable checks for saga actions\n    }).concat(sagaMiddleware),\n});\n\n\n\n// for test cases\nexport const setupStore = preloadedState => {\n  return configureStore({\n    preloadedState,\n    reducer: {\n      companyInfoState: companyInfoSlice.reducer\n    },\n    middleware: (getDefaultMiddleware) =>\n      getDefaultMiddleware({\n        thunk: false,  // Disable thunk since we're using saga\n        serializableCheck: false, // Disable serializable checks for saga actions\n      }).concat(sagaMiddleware),\n  })\n}\n\n// Run the root saga\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n\n\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,oBAAoB,MAAM,YAAY;AAC7C,SAAQC,gBAAgB,QAAO,6BAA6B;AAC5D,OAAOC,QAAQ,MAAM,SAAS;;AAE9B;AACA,MAAMC,cAAc,GAAGH,oBAAoB,CAAC,CAAC;;AAE7C;AACA,MAAMI,KAAK,GAAGL,cAAc,CAAC;EAC3BM,OAAO,EAAE;IACPC,gBAAgB,EAAEL,gBAAgB,CAACI;EACrC,CAAC;EACDE,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,KAAK,EAAE,KAAK;IAAG;IACfC,iBAAiB,EAAE,KAAK,CAAE;EAC5B,CAAC,CAAC,CAACC,MAAM,CAACR,cAAc;AAC5B,CAAC,CAAC;;AAIF;AACA,OAAO,MAAMS,UAAU,GAAGC,cAAc,IAAI;EAC1C,OAAOd,cAAc,CAAC;IACpBc,cAAc;IACdR,OAAO,EAAE;MACPC,gBAAgB,EAAEL,gBAAgB,CAACI;IACrC,CAAC;IACDE,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;MACnBC,KAAK,EAAE,KAAK;MAAG;MACfC,iBAAiB,EAAE,KAAK,CAAE;IAC5B,CAAC,CAAC,CAACC,MAAM,CAACR,cAAc;EAC5B,CAAC,CAAC;AACJ,CAAC;;AAED;AACAA,cAAc,CAACW,GAAG,CAACZ,QAAQ,CAAC;AAE5B,eAAeE,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}